МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ




ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмна інженерія»








ЗВІТ
з практичної роботи №2
з дисципліни «Аналіз та рефакторинг коду»
на тему «Методи рефакторингу коду програмного забезпечення за стандартами JetBrains / Kotlin Coding Conventions (Rename Method, Extract/Replace Magic Number with Symbolic Constant, Replace Temp with Query)»
















Виконав:                                                                            Прийняв:
ст. гр. ПЗПІ-23-8                                                               Старший викладач каф. ПІ
Корякін З. П.                                                                     Сокорчук І. П.










Харків 2025
1 Мета роботи
Ознайомити із основними методами рефакторингу коду програмного забезпечення, розкрити їх значення для підвищення якості, надійності та підтримуваності програмних продуктів.
Показати на практичних прикладах, як застосування методів рефакторінгу дозволяє покращити структуру коду, усунути дублювання та зробити логіку програми зрозумілішою.
Сформувати навички аналізу вихідного коду, вибору відповідного методу рефакторингу та використання сучасних інструментів для його виконання (IntelliJ IDEA, ReSharper, SonarQube, CodeScene) з метою створення ефективного, чистого й легкого для супроводу програмного забезпечення.


2 Історія змін
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	20.10.2025
	v. 1.1
	Створено розділ «Мета роботи»
	2
	20.10.2025
	v. 1.1
	Створено розділ «Історія змін»
	3
	20.10.2025
	v. 1.1
	Створено розділ «Хід роботи»
	4
	20.10.2025
	v. 1.1
	Створено розділ «Висновки»
	5
	20.10.2025
	v. 1.1
	Створено розділ «Використані джерела»
	6
	20.10.2025
	v. 1.1
	Створено додаток А
	7
	20.10.2025
	v. 1.1
	Створено додаток Б
	

3 Хід роботи
Вступ
У цьому розділі розглянуто сутність поняття рефакторингу як невід’ємної частини процесу розробки програмного забезпечення.

Рефакторинг не змінює результат роботи програми, але суттєво впливає на її якість — підвищує зручність читання, зменшує дублювання коду, допомагає уникнути помилок та спрощує командну взаємодію між розробниками.


Під час виконання роботи акцент зроблено на трьох ключових методах рефакторингу:
* Rename Method - перейменування методів для підвищення зрозумілості;
* Extract / Replace Magic Number with Symbolic Constant - заміна числових літералів на іменовані константи;
* Replace Temp with Query - усунення тимчасових змінних і винесення логіки у функції.


Кожен із цих методів підвищує якість програмного продукту, роблячи код чистішим і більш передбачуваним.


Метод «Rename Method»
У цьому розділі розглянуто метод Rename Method, який дозволяє покращити зрозумілість коду за рахунок використання інформативних назв функцій.

Нечіткі або абстрактні назви методів ускладнюють розуміння логіки програми, особливо у великих проектах, тому їх доцільно замінювати на зрозумілі та однозначні.


Приклад коду до рефакторингу:
1 fun f1(a: Double, b: Double): Double {
2 return a * b * 0.1
3 }
4 fun main() {
5 println(f1(200.0, 3.0)) 
6 }


У цьому прикладі назва f1 не відображає призначення функції, що робить код неінформативним.


Після рефакторингу:
1 fun calculateDiscount(price: Double, quantity: Double): Double {
2 val discountRate = 0.1
3 return price * quantity * discountRate
4 }
5 fun main() {
6 println(calculateDiscount(200.0, 3.0))
7 }


Тепер функція має зрозумілу назву calculateDiscount, а змінні price і quantity чітко пояснюють параметри. Такий підхід спрощує підтримку коду і робить його більш самодокументованим.


Метод «Extract / Replace Magic Number with Symbolic Constant»
Метод використовується для усунення так званих "магічних чисел" — числових літералів, які не пояснюють свого змісту.
Заміна їх на іменовані константи дозволяє підвищити гнучкість, зрозумілість і полегшити внесення змін у майбутньому.


Приклад коду до рефакторингу:
1 fun calculateCircleArea(radius: Double): Double {
2 return 3.14159 * radius * radius
3 }
4 fun main() {
5 println("Area: ${calculateCircleArea(5.0)}")
6 }


У коді значення 3.14159 не має пояснення, тому змінювати або повторно використовувати його може бути складно.


Після рефакторингу:
1 private const val PI = 3.14159
2 fun calculateCircleArea(radius: Double): Double {
3 return PI * radius * radius
4 }
5 fun main() {
6 println("Area: ${calculateCircleArea(5.0)}")
7 }


Тепер у коді використовується константа PI, яка пояснює сенс числа та може бути повторно застосована у будь-якій частині програми.


Метод «Replace Temp with Query»
Цей метод полягає у заміні тимчасових змінних, що зберігають проміжні обчислення, на окремі функції-запити.
Це зменшує дублювання коду, робить логіку більш прозорою та зручною для тестування.


Приклад коду до рефакторингу:
1 fun printOrderTotal(quantity: Int, price: Double) {
2 val basePrice = quantity * price
3 if (basePrice > 1000) {
4 println("Велике замовлення. Знижка 10%")
5 } else {
6 println("Загальна сума: $basePrice грн")
7 }
8 }


Після рефакторингу:
1 fun basePrice(quantity: Int, price: Double): Double = quantity * price
2 fun printOrderTotal(quantity: Int, price: Double) {
3 if (basePrice(quantity, price) > 1000) {
4 println("Велике замовлення. Знижка 10%")
5 } else {
6 println("Загальна сума: ${basePrice(quantity, price)} грн")
7 }
8 }


Логіка обчислення винесена у функцію basePrice(), що полегшує зміну або перевірку цієї частини програми без впливу на інші компоненти.


Приклад комплексного рефакторингу
У цьому прикладі продемонстровано комбіноване застосування кількох методів рефакторингу для покращення якості коду.


Оригінальний код:
1 fun getData(u: String, p: String): Boolean {
2 if (u == "admin" && p == "1234") {
3 println("Access granted")
4 return true
5 } else {
6 println("Access denied")
7 return false
8 }
9 }


Після рефакторингу:
1 private const val DEFAULT_USER = "admin"
2 private const val DEFAULT_PASS = "1234"
3 fun isAuthorized(username: String, password: String): Boolean {
4 val isValid = username == DEFAULT_USER && password == DEFAULT_PASS
5 println(if (isValid) "Access granted" else "Access denied")
6 return isValid
7 }


Тут використано одразу три підходи:
* Rename Method - функцію перейменовано на isAuthorized;
* Replace Magic Number with Constant - додано константи для збереження фіксованих значень;
* Replace Temp with Query - логіку перевірки спрощено через змінну isValid.

Такий підхід зробив код зрозумілим, безпечним і легким для подальших змін.


Покрокова демонстрація процесу рефакторингу
На цьому етапі описано логічну послідовність виконання рефакторингу:
   * визначення проблемної ділянки коду.
   * вибір найбільш доречного методу рефакторингу.
   * аналіз впливу змін на загальну логіку програми.
   * внесення змін і повторне тестування для перевірки коректності.

Такий поетапний підхід дозволяє виконувати рефакторинг без ризику порушення функціональності.


Інструменти для рефакторингу коду
Для ефективного виконання рефакторингу використовуються спеціальні програмні інструменти:
      * IntelliJ IDEA / Android Studio - автоматичне перейменування методів, виділення частини коду у функції, створення констант;
      * ReSharper (JetBrains) - глибокий аналіз залежностей між класами та пропозиції з оптимізації;
      * SonarQube - виявлення ділянок із дублюванням логіки або надмірною складністю;
      * CodeScene - візуалізація еволюції коду і визначення “вузьких місць” у проєкті.

Використання цих інструментів допомагає автоматизувати більшість кроків і зменшує ризик людських помилок.


4 Висновки
У ході виконання практичної роботи було поетапно розглянуто основні методи рефакторингу коду програмного забезпечення та їх практичне застосування.
Під час дослідження було проаналізовано методи Rename Method, Extract / Replace Magic Number with Symbolic Constant та Replace Temp with Query, що дозволяють зробити програмний код більш зрозумілим, логічно структурованим і придатним до розширення.
На практичних прикладах було продемонстровано, як рефакторинг допомагає усунути дублювання коду, покращити читабельність і зменшити кількість потенційних помилок. Особливу увагу приділено аналізу вихідного коду, вибору оптимального методу зміни та перевірці збереження функціональності після внесення змін.
Також було розглянуто сучасні інструменти, що спрощують виконання рефакторингу, такі як IntelliJ IDEA, ReSharper, SonarQube та CodeScene, які дозволяють автоматизувати виявлення складних або неефективних фрагментів коду.


5 Використані джерела
         1. Fowler M. Refactoring: Improving the Design of Existing Code, 2019;
         2. JetBrains. IntelliJ IDEA Documentation on Refactoring, 2024;
         3. SonarQube. Code Quality and Security Analysis Tool, 2024;
         4. CodeScene. Behavioral Code Analysis Platform, 2023;
         5. Kotlin Foundation. Kotlin Reference Documentation.




























































Додаток А
Посилання на відео в YouTube


Відеозапис доповіді: https://youtu.be/W-xzZoSvfiw
























































































Додаток Б
Сторінки презентації


  

Рисунок Б.1 - Титульна сторінка




  

Рисунок Б.2 - Сторінка вступу








  

Рисунок Б.3 - Сторінка методу «Rename Method»






  

Рисунок Б.4 - Сторінка методу «Extract / Replace Magic Number with Symbolic Constant»


  

Рисунок Б.5 - Сторінка методу «Replace Temp with Query»




  

Рисунок Б.6 - Сторінка прикладу комплексного рефакторингу


  

Рисунок Б.7 - Сторінка покрокової демонстрації процесу




  

Рисунок Б.8 - Сторінка інструментів для рефакторингу коду




  

Рисунок Б.9 - Сторінка висновків




  

Рисунок Б.10 - Сторінка використаних джерел