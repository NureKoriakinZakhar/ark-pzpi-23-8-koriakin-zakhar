МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ




ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмна інженерія»








ЗВІТ
з практичної роботи №1
з дисципліни «Аналіз та рефакторинг коду»
на тему «Правила оформлення програмного коду на Kotlin»
















Виконав:                                                                            Прийняв:
ст. гр. ПЗПІ-23-8                                                               Старший викладач каф. ПІ
Корякін З. П.                                                                     Сокорчук І. П.












Харків 2025
1.1 Мета роботи
Ознайомити з основними правилами оформлення програмного коду на мові Kotlin відповідно до офіційних рекомендацій, показати значення стандартизації стилю для підвищення якості та читабельності коду, а також навчити застосовувати практичні інструменти й підходи (форматування, іменування, коментарі, документування, автоматизація перевірок), які забезпечують ефективну командну роботу та підтримуваність програмних проектів.


1.2 Хід роботи
1.2.1 Важливість правил оформлення коду
У цьому розділі розглянуто значення правил оформлення коду на мові Kotlin та їх вплив на якість програмного забезпечення. Обговорено, що дотримання стандартів стилю забезпечує підвищену читабельність, зменшує ймовірність помилок і полегшує рев’ю та підтримку коду.


1.2.2 Структура коду
У цьому розділі розглянуто принципи організації коду в проєкті та логічного поділу на модулі, файли та класи. Показано, що дотримання правильної структури забезпечує легкість пошуку необхідного функціоналу, полегшує підтримку проєкту і робить код зрозумілим для інших членів команди. Кожен клас або об’єкт рекомендується розміщувати в окремому файлі, логічні блоки - в окремих модулях чи пакетах, а коментарі використовуються для розділення великих секцій коду. У прикладі показано правильний та неправильний підхід до організації класів у файлах.


Приклад коду (правильно):
1 package com.example.models
2 class User(val name: String, val age: Int)


Приклад коду (неправильно):
1 class User { ... }
2 class Order { ... }
3 class Invoice { ... }


У першому прикладі видно, що кожен клас розташований у своєму файлі, що спрощує читання та підтримку коду. У другому прикладі кілька класів у одному файлі ускладнюють розуміння структури проекту та підвищують ймовірність помилок при внесенні змін.


1.2.3 Форматування коду
У цьому розділі розглянуто правила форматування коду в Kotlin та їх вплив на читабельність і передбачуваність програми. Обговорено, що правильні відступи, вирівнювання, розташування дужок і довжина рядків допомагають розробникам швидко зрозуміти структуру програми та уникнути логічних помилок. У прикладі показано, як виглядає добре оформлений код та як може виглядати поганий стиль, який ускладнює сприйняття.


Приклад коду (добре):
1 if (user != null) {
2 println("Hello, ${user.name}")
3 }
Приклад коду (погано):
1 if(user!=null)
2 {println("Hello, "+user.name)}


У першому прикладі дотримано правильні відступи, пробіли та K&R-стиль дужок, що робить код легким для читання. У другому прикладі хаотичні пробіли та розташування дужок ускладнюють сприйняття логіки програми, що може призвести до помилок і знизити ефективність командної роботи.


1.2.4 Іменування
У цьому розділі розглянуто правила іменування змінних, функцій, класів та констант у Kotlin та їх вплив на зрозумілість коду. Обговорено, що імена мають бути зрозумілими, лаконічними та унікальними, відображати призначення змінної або функції, а також відповідати загальноприйнятим конвенціям: camelCase для змінних і функцій, PascalCase для класів та UPPER_SNAKE_CASE для констант. У прикладі показано правильний та неправильний підхід до іменування.


Приклад коду (добре):
1 val userName: String
2 fun getUserAge(): Int
3 class UserProfile
4 const val MAX_RETRY_COUNT = 3


Приклад коду (погано):
1 val User_name: String
2 fun Get_user_Age(): Int
3 class user_profile


У першому прикладі імена змінних, функцій та класів відповідають конвенціям Kotlin, що забезпечує зрозумілість коду та полегшує командну роботу. У другому прикладі порушено правила іменування, що ускладнює читання та підвищує ризик помилок при використанні коду.


1.2.5 Коментарі
У цьому розділі розглянуто правила використання коментарів у Kotlin та їхнє значення для пояснення логіки програми. Обговорено, що коментарі мають пояснювати складні алгоритми або бізнес-логіку, але не дублювати очевидні дії коду. Надлишкові або очевидні коментарі ускладнюють сприйняття коду та знижують його читабельність. У прикладі показано правильне і неправильне використання коментарів.


Приклад коду (добре):
1 // Обчислюємо податок для замовлення з урахуванням ПДВ
2 val tax = order.calculateTax()


Приклад коду (погано):
1 // Змінна tax
2 val tax = order.calculateTax()
У першому прикладі коментар пояснює бізнес-логіку обчислення податку, не повторюючи очевидні дії коду. У другому прикладі коментар просто дублює назву змінної, що не додає користі та погіршує читабельність.


1.2.6 Документування коду
У цьому розділі розглянуто правила документування коду в Kotlin за допомогою KDoc та їхнє значення для підтримки зрозумілості та підтримуваності програм. Документація повинна містити опис функцій, класів та модулів, параметрів і значень, що повертаються, а також приклади використання. У прикладі показано, як оформляється коректна документація функції для обчислення знижки.


Приклад коду:
1 /**
2 * Обчислює знижку для клієнта.
3 *
4 * @param amount сума покупки
5 * @return розмір знижки у відсотках
6 * @sample calculateDiscount(200.0) // повертає 10
7 */
8 fun calculateDiscount(amount: Double): Int { ... }


У прикладі показано, що коментар містить опис призначення функції, параметрів, значення, що повертається, та приклад використання.


1.2.7 Документування коду
У цьому розділі розглянуто специфічні конвенції стилю кодування саме для мови Kotlin та їхнє значення для підвищення читабельності й підтримуваності коду. Обговорено правила іменування змінних, функцій та класів, форматування дужок, відступів, обмеження довжини рядка, використання пробілів і пустих рядків для розділення логічних блоків.


1.2.8 Кодування на основі тестування (TDD)
У цьому розділі розглянуто підхід Test-Driven Development (TDD), коли тести пишуться до реалізації функціоналу. Обговорено, що TDD підвищує надійність коду, спрощує внесення змін і дозволяє одразу перевіряти правильність реалізації. Крім того, написані тести описують очікувану поведінку програми, що полегшує її підтримку та розуміння іншими розробниками. У прикладі показано спочатку написання тесту для перевірки розрахунку знижки, а потім реалізацію функції.


Приклад коду (тест):
1 @Test
2 fun testDiscount() {
3 assertEquals(10, calculateDiscount(200.0))
4 }


Приклад коду (реалізація):
1 fun calculateDiscount(amount: Double): Int = if (amount > 100) 10 else 0


У прикладі показано, що тест описує очікуваний результат функції ще до її реалізації. Це дозволяє переконатися, що логіка коду відповідає вимогам, і уникнути помилок. 


1.2.9 Інструменти та автоматизація
У цьому розділі розглянуто інструменти та підходи для автоматичного контролю якості коду в Kotlin. Обговорено використання статичного аналізу коду за допомогою таких інструментів, як SonarQube, Codacy і Detekt, що дозволяють виявляти порушення стилю, потенційні помилки та проблемні ділянки коду. Також підкреслено значення автоформатування за допомогою ktlint та інтеграції цих інструментів у CI/CD-процеси для автоматичної перевірки коду при кожному коміті. Крім того, використання Git Hooks дозволяє контролювати відповідність стилю ще на етапі локальної роботи розробника.


1.2.10 Приклади оформлення коду
У цьому розділі розглянуто практичні приклади правильного та неправильного оформлення коду у Kotlin і його вплив на читабельність та підтримку. Показано, що чистий та структурований код легше розуміти, тестувати і обговорювати у команді. У прикладі показано функцію для перевірки повноліття користувача у двох варіантах: коректному та некоректному.


Приклад коду (добре):
1 fun isAdult(age: Int): Boolean {
2 return age >= 18
3 }
4
5 fun printUserInfo(user: User) {
6 println("Name: ${user.name}")
7 println("Age: ${user.age}")
8 }
9
10 class User(val name: String, val age: Int)


Приклад коду (погано):
1 fun adult(a:Int):Boolean{return a>=18}
2 fun pu(u:User){println(u.name);println(u.age)}
3 class U(n:String,a:Int)


У першому прикладі дотримано правил форматування: чіткі відступи, пробіли, зрозумілі назви функції та параметрів. Це дозволяє швидко зрозуміти призначення функції та її логіку. У другому прикладі код занадто стиснутий, назви не пояснювальні, відсутні пробіли та переноси рядків, що ускладнює його сприйняття.


1.3 Висновки
У ході виконання практичної роботи було поетапно вивчено правила оформлення коду на мові Kotlin та їх практичне застосування. Спершу було розглянуто значення правильного форматування коду, включно з відступами, розташуванням дужок, довжиною рядків і впливом цих факторів на читабельність та підтримуваність програм. Потім приділялась увага іменуванню змінних, функцій, класів та констант відповідно до конвенцій Kotlin, зокрема camelCase для змінних і функцій, PascalCase для класів та UPPER_SNAKE_CASE для констант. Далі було вивчено правила використання коментарів і документування коду за допомогою KDoc для пояснення логіки, параметрів і результатів функцій. Окрім цього, розглядалися принципи організації коду у файлах, модулях та пакетах, використання інструментів автоматизації, таких як ktlint та Detekt, для перевірки стилю коду, а також підходи Test-Driven Development (TDD) для підвищення надійності та тестованості програм. В процесі роботи практично застосовувалися ці правила та інструменти на прикладах функцій та класів, що дозволило закріпити теоретичні знання та оцінити їх ефективність у забезпеченні зрозумілості, передбачуваності та підтримуваності коду.


1.4 Використані джерела
1. Kotlin Coding Conventions [Електронний ресурс] – Режим доступу: https://kotlinlang.org/docs/coding-conventions.html (дата звернення: 29.09.2025).
2. Kotlin Documentation. JetBrains [Електронний ресурс] – Режим доступу: https://kotlinlang.org/docs/reference/ (дата звернення: 29.09.2025).
3. JetBrains. Приклади застосування правил оформлення коду [Електронний ресурс] – Режим доступу: https://www.jetbrains.com/help/idea/kotlin.html (дата звернення: 29.09.2025).




























































Додаток А
Посилання на відео в YouTube


https://youtu.be/I14iGFFgmFg
























































































Додаток Б
Сторінки презентації


  

Рисунок 1 - Титульна сторінка


  

Рисунок 2 - Сторінка вступу








  

Рисунок 3 - Сторінка структури коду


  

Рисунок 4 - Сторінка форматування коду












  

Рисунок 5 - Сторінка іменування


  

Рисунок 6 - Сторінка коментарів












  

Рисунок 7 - Сторінка документування коду


  

Рисунок 8 - Сторінка конвенції












  

Рисунок 9 - Сторінка кодування на основі тестування




  

Рисунок 10 - Сторінка інструментів та автоматизації










  

Рисунок 11 - Сторінка прикладів оформлення коду


  

Рисунок 12 - Сторінка висновків












  

Рисунок 13 - Сторінка використаних джерел